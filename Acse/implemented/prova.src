if (!getVariable(program,$1)->isArray)notifyError(AXE_INVALID_TYPE);
			  t_array.array_compre=newLabel(program);
			  t_array.array_cond=newLabel(program);
			  t_array.reg_counter_array=gen_load_immediate(program,-1);
			  gen_bt_instruction(program,t_array.array_compre,0);
			  t_array.array_expre=newLabel(program);
			  assignLabel(program,t_array.array_expre);
			}
		     LSQUARE exp RSQUARE {
			  storeArrayElement(program,$1,create_expression(t_array.reg_counter_array,REGISTER),$5);
			  gen_bt_instruction(program,t_array.array_cond,0);
			}
		    FOR IDENTIFIER IN IDENTIFIER{
			if(getVariable(program,$9)->isArray || !getVariable(program,$11)->isArray)notifyError(AXE_INVALID_TYPE);
			
			t_axe_variable *var1=getVariable(program,$9);
			t_axe_variable *var2=getVariable(program,$11);
			assignLabel(program,t_array.array_compre);
			int reg_i=getNewRegister(program);
			int reg_size=getNewRegister(program);
			gen_addi_instruction(program,reg_i,REG_0,var1->arraySize);
			gen_subi_instruction(program,getNewRegister(program),reg_i,var2->arraySize);
			//se è negativo significa che l'array x è piu grande.. Se è positivo significa che l'array y è piu grande
			t_axe_label *setmin=newLabel(program);
			gen_bmi_instruction(program,setmin,0);
			gen_addi_instruction(program,reg_size,REG_0,var2->arraySize);
			gen_bt_instruction(program,t_array.array_cond,0);
			assignLabel(program,setmin);
			gen_addi_instruction(program,reg_size,REG_0,var1->arraySize);
			assignLabel(program,t_array.array_cond);
			// dopo aver deciso qual'è il minimo 
			// lo avevo inzializzato a meno 1 ricorda
			gen_addi_instruction(program,t_array.reg_counter_array,t_array.reg_counter_array,1);
			gen_sub_instruction(program,getNewRegister(program),t_array.reg_counter_array,reg_size,CG_DIRECT_ALL);
			t_axe_label *label_end=newLabel(program);
			gen_beq_instruction(program,label_end,0);
			int location=get_symbol_location(program,$9,0);
			int ele=loadArrayElement(program,$11,create_expression(t_array.reg_counter_array,REGISTER));
			gen_add_instruction(program,location,REG_0,ele,CG_DIRECT_ALL);
			gen_bt_instruction(program,t_array.array_expre,0);
			assignLabel(program,label_end);
			
			
			free($1);
			free($9);
			free($11);
