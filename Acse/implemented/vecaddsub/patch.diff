--- Acse.y	2018-12-19 11:06:16.930719000 +0100
+++ Original.y	2017-12-12 12:04:19.000000000 +0100
@@ -124,8 +124,6 @@
 %token RETURN
 %token READ
 %token WRITE
-%token VECADD
-%token VECSUB
 
 %token <label> DO
 %token <while_stmt> WHILE
@@ -255,84 +253,6 @@
             | while_statement            { /* does nothing */ }
             | do_while_statement SEMI    { /* does nothing */ }
             | return_statement SEMI      { /* does nothing */ }
-	    | vec_add_statement SEMI { /* does nothing */ }
-	    | vec_sub_statement SEMI { /* does nothing */ }
-;
-
-vec_add_statement: VECADD LPAR IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER RPAR {
-			t_axe_variable *array1=getVariable(program,$3);
-			t_axe_variable *array2=getVariable(program,$5);
-			t_axe_variable *array3=getVariable(program,$7);
-			if(!array1->isArray || !array2->isArray || !array3->isArray) notifyError(AXE_INVALID_TYPE);
-			else if(array1->arraySize!=array2->arraySize || array2->arraySize!=array3->arraySize || array1->arraySize!=array3->arraySize) notifyError(AXE_INVALID_TYPE); // dovrebbe essere un errore diverso
-			else{
-	                  int reg_lenght=getNewRegister(program);
-			  gen_addi_instruction(program,reg_lenght,REG_0,array1->arraySize);
-			  t_axe_label *label;
-			  label=newLabel(program);
-			  int reg_counter=getNewRegister(program);		// il contatore che andro a incrementare ogni volta
-			  gen_addi_instruction(program,reg_counter,REG_0,0);
-			  /* Remember that it's not possible to declare arrays with 0 elements */
-			  assignLabel(program,label);
-			  
-			  int reg2=loadArrayElement(program,$5,create_expression(reg_counter, REGISTER));
-			  int reg_array2=getNewRegister(program);		
-			  gen_add_instruction(program,reg_array2,REG_0,reg2,CG_DIRECT_ALL);		// carico in un registro il valore di a[i]
-			  int reg3=loadArrayElement(program,$7,create_expression(reg_counter, REGISTER));
-			  int reg_array3=getNewRegister(program);
-			  gen_add_instruction(program,reg_array3,REG_0,reg3,CG_DIRECT_ALL);		// carico in un altro registro il valore di b[i]
-
-			  int reg_temp=getNewRegister(program);
-			  gen_add_instruction(program,reg_temp,reg_array2,reg_array3,CG_DIRECT_ALL);  // mi salvo il valore da caricare
-		          storeArrayElement(program,$3,create_expression(reg_counter,REGISTER),create_expression(reg_temp,REGISTER));
-			  gen_addi_instruction(program,reg_counter,reg_counter,1);
-		   	  int reg_temp2=getNewRegister(program);  // potrei riutilizzare anche reg_temp
-			  gen_sub_instruction(program,reg_temp2,reg_lenght,reg_counter,CG_DIRECT_ALL);
-			  gen_bne_instruction(program,label,0);
-			}
-
-		
-			}
-;
-
-vec_sub_statement: VECSUB LPAR IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER RPAR {
-			t_axe_variable *array1=getVariable(program,$3);
-			t_axe_variable *array2=getVariable(program,$5);
-			t_axe_variable *array3=getVariable(program,$7);
-			if(!array1->isArray || !array2->isArray || !array3->isArray) notifyError(AXE_INVALID_TYPE);
-			else if(array1->arraySize!=array2->arraySize || array2->arraySize!=array3->arraySize || array1->arraySize!=array3->arraySize) notifyError(AXE_INVALID_TYPE); // dovrebbe essere un errore diverso
-			else {
-			  int reg_lenght=getNewRegister(program);
-			  gen_addi_instruction(program,reg_lenght,REG_0,array1->arraySize);
-			  t_axe_label *label;
-			  label=newLabel(program);
-			  int reg_counter=getNewRegister(program);		// il contatore che andro a incrementare ogni volta
-			  gen_addi_instruction(program,reg_counter,REG_0,0);
-			  /* Remember that it's not possible to declare arrays with 0 elements */
-			  assignLabel(program,label);
-			  
-			  int reg2=loadArrayElement(program,$5,create_expression(reg_counter, REGISTER));
-			  int reg_array2=getNewRegister(program);		
-			  gen_add_instruction(program,reg_array2,REG_0,reg2,CG_DIRECT_ALL);		// carico in un registro il valore di a[i]
-			  int reg3=loadArrayElement(program,$7,create_expression(reg_counter, REGISTER));
-			  int reg_array3=getNewRegister(program);
-			  gen_add_instruction(program,reg_array3,REG_0,reg3,CG_DIRECT_ALL);		// carico in un altro registro il valore di b[i]
-
-			  int reg_temp=getNewRegister(program);
-			  gen_sub_instruction(program,reg_temp,reg_array2,reg_array3,CG_DIRECT_ALL);  // SOLO QUESTA ISTRUZIONE CAMBIA RISPETTO AL PRECEDENTE
-		          storeArrayElement(program,$3,create_expression(reg_counter,REGISTER),create_expression(reg_temp,REGISTER));
-			  gen_addi_instruction(program,reg_counter,reg_counter,1);
-		   	  int reg_temp2=getNewRegister(program);  // potrei riutilizzare anche reg_temp
-			  gen_sub_instruction(program,reg_temp2,reg_lenght,reg_counter,CG_DIRECT_ALL);
-			  gen_bne_instruction(program,label,0);
-
-
-			}
-
-
-		}
-
-
 ;
 
 read_write_statement : read_statement  { /* does nothing */ }
