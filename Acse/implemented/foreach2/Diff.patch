--- Acse.y	2019-01-12 18:27:50.842751643 +0100
+++ Original.y	2017-12-12 12:04:19.000000000 +0100
@@ -107,8 +107,7 @@
    t_axe_declaration *decl;
    t_list *list;
    t_axe_label *label;
-   t_while_statement while_stmt; 
-   t_forE forE;
+   t_while_statement while_stmt;
 } 
 /*=========================================================================
                                TOKENS 
@@ -121,6 +120,7 @@
 %token ASSIGN LT GT SHL_OP SHR_OP EQ NOTEQ LTEQ GTEQ
 %token ANDAND OROR
 %token COMMA
+%token FOR
 %token RETURN
 %token READ
 %token WRITE
@@ -132,7 +132,6 @@
 %token <intval> TYPE
 %token <svalue> IDENTIFIER
 %token <intval> NUMBER
-%token <forE> FOR
 
 %type <expr> exp
 %type <decl> declaration
@@ -253,49 +252,9 @@
 control_statement : if_statement         { /* does nothing */ }
             | while_statement            { /* does nothing */ }
             | do_while_statement SEMI    { /* does nothing */ }
-	    | for_each_statement SEMI
             | return_statement SEMI      { /* does nothing */ }
 ;
 
-for_each_statement: FOR LPAR IDENTIFIER COLON IDENTIFIER RPAR {
-			if(getVariable(program,$3)->isArray || !getVariable(program,$5)->isArray)notifyError(AXE_INVALID_TYPE);
-
-			int reg_counter=getNewRegister(program);
-
-			int reg_firstvariable=get_symbol_location(program,$3,0);
-
-			gen_addi_instruction(program,reg_counter,REG_0,0);
-			int reg_size=getNewRegister(program);    // anche se non Ã¨ necessari oquesto registro 
-			gen_addi_instruction(program,reg_size,REG_0,getVariable(program,$5)->arraySize);
-
-			int reg=loadArrayElement(program,$5,create_expression(reg_counter,REGISTER));
-			gen_add_instruction(program,reg_firstvariable,REG_0,reg,CG_DIRECT_ALL);
-			
-			$1.label_exec=newLabel(program);
-			gen_bt_instruction(program,$1.label_exec,0);
-			
-
-			// qui abbiamo l'incremento
-			$1.label_increase=newLabel(program);
-			assignLabel(program,$1.label_increase);
-			gen_addi_instruction(program,reg_counter,reg_counter,1);
-			gen_sub_instruction(program,getNewRegister(program),reg_counter,reg_size,CG_DIRECT_ALL);
-
-			$1.label_end=newLabel(program);
-			gen_beq_instruction(program,$1.label_end,0);
-
-			reg=loadArrayElement(program,$5,create_expression(reg_counter,REGISTER));
-			gen_add_instruction(program,reg_firstvariable,REG_0,reg,CG_DIRECT_ALL);
-
-			assignLabel(program,$1.label_exec);
-		   }
-		   code_block{
-			gen_bt_instruction(program,$1.label_increase,0);
-			assignLabel(program,$1.label_end);
-		   }
-;
-
-
 read_write_statement : read_statement  { /* does nothing */ }
                      | write_statement { /* does nothing */ }
 ;
