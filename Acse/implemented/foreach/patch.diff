--- Acse.y	2018-12-18 15:02:20.697404000 +0100
+++ Original.y	2017-12-12 12:04:19.000000000 +0100
@@ -93,8 +93,6 @@
 extern int yylex(void);
 extern int yyerror(const char* errmsg);
 
-
-
 %}
 %expect 1
 
@@ -110,7 +108,6 @@
    t_list *list;
    t_axe_label *label;
    t_while_statement while_stmt;
-   t_foreach_statement for_each;
 } 
 /*=========================================================================
                                TOKENS 
@@ -127,7 +124,6 @@
 %token RETURN
 %token READ
 %token WRITE
-%token IN
 
 %token <label> DO
 %token <while_stmt> WHILE
@@ -136,7 +132,6 @@
 %token <intval> TYPE
 %token <svalue> IDENTIFIER
 %token <intval> NUMBER
-%token <for_each> FOREACH
 
 %type <expr> exp
 %type <decl> declaration
@@ -258,52 +253,8 @@
             | while_statement            { /* does nothing */ }
             | do_while_statement SEMI    { /* does nothing */ }
             | return_statement SEMI      { /* does nothing */ }
-	    | for_each_statement SEMI {}
 ;
 
-for_each_statement: FOREACH IDENTIFIER IN IDENTIFIER{
-			int location;
-			t_axe_variable *var;
-			t_axe_variable *var2;					/* CHECK IF THE VARIABLE IS DECLARED */
-			var=getVariable(program,$4);			        /* it return t_axe_variable */
-			if(!var->isArray) notifyError(AXE_INVALID_TYPE);
-			var2=getVariable(program,$2);
-			if(var2->isArray) notifyError(AXE_INVALID_TYPE);
-			else{
-	
-			   int registe;
-			    int reg_counter=getNewRegister(program);
-			    int reg_size=getNewRegister(program);
-			    int reg_dest=get_symbol_location(program, $2, 0);
-			    $1.reg_counter=reg_counter;
-			    $1.reg_size=reg_size;
-			    $1.reg_dest=reg_dest;
-			    
-			    gen_addi_instruction(program,reg_counter,REG_0,0); // il contatore aprte da zero 
-			    gen_addi_instruction(program,reg_size,REG_0,var->arraySize);
-			    t_axe_label *label_init;
-			    label_init=newLabel(program);
-			    $1.label_init=label_init;
-			    assignLabel(program,label_init);
-			    int reg=loadArrayElement(program,$4,create_expression(reg_counter,REGISTER));
-			    gen_add_instruction(program,reg_dest,REG_0,reg,CG_DIRECT_ALL);
-			  }
-			free($2);
-			free($4);
-			}
-			code_block{
-        		 t_axe_label *label_end;
-			      gen_sub_instruction(program,getNewRegister(program),$1.reg_size,$1.reg_counter,CG_DIRECT_ALL);
-         		label_end=newLabel(program);
-         		gen_beq_instruction(program,label_end,0);
-         		gen_addi_instruction(program,$1.reg_counter,$1.reg_counter,1);
-         		gen_bt_instruction(program,$1.label_init,0);
-			assignLabel(program,label_end);
-			}
-			;
-			
-		
-
 read_write_statement : read_statement  { /* does nothing */ }
                      | write_statement { /* does nothing */ }
 ;
