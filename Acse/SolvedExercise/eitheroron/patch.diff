--- Original.y	2017-12-12 12:04:19.000000000 +0100
+++ Acse.y	2018-12-19 17:53:39.583541019 +0100
@@ -93,6 +93,14 @@
 extern int yylex(void);
 extern int yyerror(const char* errmsg);
 
+typedef struct t_either_on_or{
+	t_axe_label *label_evaluate;
+	t_axe_label *label_end;
+	t_axe_label *label_true;
+	t_axe_label *label_false;
+}t_either_or_on;
+
+
 %}
 %expect 1
 
@@ -108,6 +116,7 @@
    t_list *list;
    t_axe_label *label;
    t_while_statement while_stmt;
+   t_either_or_on t_either;
 } 
 /*=========================================================================
                                TOKENS 
@@ -124,6 +133,9 @@
 %token RETURN
 %token READ
 %token WRITE
+%token OR
+%token ON
+
 
 %token <label> DO
 %token <while_stmt> WHILE
@@ -132,6 +144,7 @@
 %token <intval> TYPE
 %token <svalue> IDENTIFIER
 %token <intval> NUMBER
+%token <t_either> EITHER
 
 %type <expr> exp
 %type <decl> declaration
@@ -253,7 +266,51 @@
             | while_statement            { /* does nothing */ }
             | do_while_statement SEMI    { /* does nothing */ }
             | return_statement SEMI      { /* does nothing */ }
+	    | either_on_until SEMI 	{ /* does nothing */}
+;
+
+either_on_until: EITHER {
+		  $1.label_true=newLabel(program);
+		  $1.label_evaluate=newLabel(program);
+		  $1.label_end=newLabel(program);
+		  gen_bt_instruction(program,$1.label_evaluate,0);
+		  assignLabel(program,$1.label_true);
+		}
+		code_block  {
+		  gen_bt_instruction(program,$1.label_end,0);
+		}
+		OR {
+		  $1.label_false=newLabel(program);
+		  assignLabel(program,$1.label_false);
+		}
+		code_block {
+		 gen_bt_instruction(program,$1.label_end,0);
+		}
+		ON {
+		 assignLabel(program,$1.label_evaluate);	
+		}
+		exp {
+		 if ($11.expression_type == IMMEDIATE)
+                         gen_load_immediate(program, $11.value);
+                     else
+                         gen_andb_instruction(program, $11.value,
+                             $11.value, $11.value, CG_DIRECT_ALL);
+
+                 gen_bne_instruction (program, $1.label_true, 0);
+		
+		/* LO FACCIO DUE VOLTE PER SETTARE IL VALORE DALLA PSW */
+		if ($11.expression_type == IMMEDIATE)
+                         gen_load_immediate(program, $11.value);
+                     else
+                         gen_andb_instruction(program, $11.value,
+                             $11.value, $11.value, CG_DIRECT_ALL);
+
+		gen_beq_instruction(program,$1.label_false,0);
+		 
+		 assignLabel(program,$1.label_end);
+		}
 ;
+			
 
 read_write_statement : read_statement  { /* does nothing */ }
                      | write_statement { /* does nothing */ }
