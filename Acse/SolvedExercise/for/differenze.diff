--- Acse.y	2018-12-17 15:09:33.185262717 +0100
+++ Original.y	2017-12-12 12:04:19.000000000 +0100
@@ -93,13 +93,6 @@
 extern int yylex(void);
 extern int yyerror(const char* errmsg);
 
-typedef struct t_for_statement{
-  t_axe_label *label_exp;
-  t_axe_label *label_exec;
-  t_axe_label *label_increment;
-  t_axe_label *label_end;
-}t_for_statement;
-
 %}
 %expect 1
 
@@ -115,11 +108,7 @@
    t_list *list;
    t_axe_label *label;
    t_while_statement while_stmt;
-   t_for_statement for_stmt;
 } 
-
-
-
 /*=========================================================================
                                TOKENS 
 =========================================================================*/
@@ -131,10 +120,10 @@
 %token ASSIGN LT GT SHL_OP SHR_OP EQ NOTEQ LTEQ GTEQ
 %token ANDAND OROR
 %token COMMA
+%token FOR
 %token RETURN
 %token READ
 %token WRITE
-%token CIAO
 
 %token <label> DO
 %token <while_stmt> WHILE
@@ -143,7 +132,6 @@
 %token <intval> TYPE
 %token <svalue> IDENTIFIER
 %token <intval> NUMBER
-%token <for_stmt> FOR
 
 %type <expr> exp
 %type <decl> declaration
@@ -265,7 +253,6 @@
             | while_statement            { /* does nothing */ }
             | do_while_statement SEMI    { /* does nothing */ }
             | return_statement SEMI      { /* does nothing */ }
-	    | for_statement SEMI	 { /* does nothing */ }
 ;
 
 read_write_statement : read_statement  { /* does nothing */ }
@@ -401,7 +388,6 @@
                      assignLabel(program, $1.label_end);
                   }
 ;
-
                   
 do_while_statement  : DO
                      {
@@ -425,32 +411,6 @@
                      }
 ;
 
-for_statement: FOR LPAR assign_statement {
-		 $1.label_exp=assignNewLabel(program);
-		}
-	       SEMI exp {
-		if ($6.expression_type == IMMEDIATE)
-                               gen_load_immediate(program, $6.value);
-                           else
-                               gen_andb_instruction(program, $6.value,
-                                   $6.value, $6.value, CG_DIRECT_ALL);
-
-		$1.label_exec=newLabel(program);
-		$1.label_end=newLabel(program);
-		gen_bne_instruction(program,$1.label_exec,0);
-		gen_bt_instruction(program,$1.label_end,0);
-		$1.label_increment=assignNewLabel(program);
-		}
-	       SEMI assign_statement {
-		    gen_bt_instruction(program,$1.label_exp,0);
-		    assignLabel(program,$1.label_exec);
-		}
-	       RPAR code_block{
-		 gen_bt_instruction(program,$1.label_increment,0);
-		 assignLabel(program,$1.label_end);
-		}
-		;
-
 return_statement : RETURN
             {
                /* insert an HALT instruction */
